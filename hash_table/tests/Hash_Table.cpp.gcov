        -:    0:Source:Hash_Table.cpp
        -:    0:Graph:Hash_Table.gcno
        -:    0:Data:Hash_Table.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by user on 28/02/2020.
        -:    3://
        -:    4:
        -:    5:#include "Hash_Table.h"
        -:    6:
        -:    7:
        -:    8:template<class Key>
        -:    9:typename Hash_Table<Key>::Node **Hash_Table<Key>::alloc_ptr = nullptr;
        -:   10:
        -:   11:template<class Key>
        -:   12:int Hash_Table<Key>::number_allocations = 0;
        -:   13:
        -:   14:template<class Key>
        2:   15:void *Hash_Table<Key>::operator new(std::size_t size)
        -:   16:{
        4:   17:	NewHandlerHolder handler(std::set_new_handler(mem_handler));
        -:   18:	/*[+1] means reserving additional memory for Iterator to the end of this container*/
        2:   19:	alloc_ptr = new Node *[(_HASH_TABLE_SIZE + 1)]{nullptr};
        2:   20:	++number_allocations;
        4:   21:	return ::operator new(size);
        -:   22:}
        -:   23:
        -:   24:template<class T>
     4073:   25:const std::size_t &Hash_Table<T>::size() const noexcept
     4073:   26:{ return n_buckets; }
        -:   27:
        -:   28:
        -:   29:template<class T>
        1:   30:Hash_Table<T>::Hash_Table(Hash_Table<T>&& rhs) noexcept : hash_t(rhs.hash_t), n_buckets(rhs.n_buckets)
        -:   31:{
        1:   32:	rhs.hash_t = nullptr;
        1:   33:	rhs.n_buckets = 0;
        1:   34:}
        -:   35:
        -:   36:template<class T>
        2:   37:Hash_Table<T>& Hash_Table<T>::operator=(Hash_Table<T>&& rhs)noexcept {
     3932:   38:	for (std::size_t i = 0; i < n_buckets; ++i)
     3930:   39:		destroy_bucket(hash_t[i]);
        2:   40:	delete[] hash_t;
        2:   41:	hash_t = rhs.hash_t;
        2:   42:	n_buckets = rhs.n_buckets;
        -:   43:
        2:   44:	rhs.hash_t = nullptr;
        2:   45:	rhs.n_buckets = 0;
        2:   46:	return (*this);
        -:   47:}
        -:   48:
        -:   49:template<class Key>
       16:   50:Hash_Table<Key>::Hash_Table(std::size_t size)
        -:   51:{
        -:   52:
       16:   53:	if (number_allocations) {
        2:   54:		if (size != _HASH_TABLE_SIZE)
        1:   55:			throw std::runtime_error("Redefine operator new in Hash_Table made a very strange thing!!!");
        1:   56:		hash_t = alloc_ptr;
        1:   57:		alloc_ptr = nullptr;
        1:   58:		--number_allocations;
        -:   59:	}
        -:   60:	else {
       28:   61:		NewHandlerHolder handler(std::set_new_handler(mem_handler));
        -:   62:		/*[+1] means reserving additional memory for Iterator to the end of this container*/
       14:   63:		hash_t = new Node *[(size + 1)]{nullptr};
       13:   64:		n_buckets = size;
        -:   65:	}
       14:   66:}
        -:   67:
        -:   68:template<class Key>
        2:   69:void Hash_Table<Key>::operator delete(void *ptr) noexcept
        -:   70:{
        2:   71:	::operator delete(ptr);
        2:   72:	delete[](alloc_ptr);
        2:   73:	alloc_ptr = nullptr;
        2:   74:	if (number_allocations)
        1:   75:		--number_allocations;
        -:   76:
        2:   77:}
        -:   78:
        -:   79:template<class T>
     2129:   80:typename Hash_Table<T>::Node *Hash_Table<T>::operator[](const std::size_t i)
        -:   81:{
     2129:   82:	return const_cast<Node *>((static_cast<const Hash_Table<T> &>(*this)).operator[](i));
        -:   83:}
        -:   84:
        -:   85:template<class T>
     3257:   86:const typename Hash_Table<T>::Node *Hash_Table<T>::operator[](const std::size_t i) const
        -:   87:{
     3257:   88:	if (i >= n_buckets)
        1:   89:		throw std::out_of_range("You aren't allowed to access this part of memory");
     3256:   90:	return hash_t[i];
        -:   91:}
        -:   92:
        -:   93:template<class T>
        1:   94:Hash_Table<T>::Hash_Table(const Hash_Table<T> &ht)
        1:   95:	: n_buckets(ht.n_buckets)
        -:   96:{
        2:   97:	NewHandlerHolder handler(std::set_new_handler(mem_handler));
        -:   98:	/*A very important moment to allocate memory for one more bucket ([n_bucket + 1])
        -:   99:	 * to have a valid memory to create an Iterator to the element after the last one*/
        1:  100:	hash_t = new Node *[(n_buckets + 1)]{nullptr};
      501:  101:	for (std::size_t i = 0; i < n_buckets; ++i)
      500:  102:		hash_t[i] = deep_copy_bucket(ht[i]);
        -:  103:
        1:  104:}
        -:  105:
        -:  106:template<class T>
        2:  107:Hash_Table<T> &Hash_Table<T>::operator=(const Hash_Table<T> &ht)
        -:  108:{
        2:  109:	if (&ht != this) {
      630:  110:		for (std::size_t i = 0; i < n_buckets; ++i)
      628:  111:			destroy_bucket(hash_t[i]);
        2:  112:		delete[] hash_t;
        -:  113:
        4:  114:		NewHandlerHolder handler(std::set_new_handler(mem_handler));
        2:  115:		n_buckets = ht.n_buckets;
        -:  116:		/*The same words as in assignment operator which is represented above*/
        2:  117:		hash_t = new Node *[(n_buckets + 1)]{nullptr};
      630:  118:		for (std::size_t i = 0; i < n_buckets; ++i)
      628:  119:			hash_t[i] = deep_copy_bucket(ht[i]);
        -:  120:
        -:  121:	}
        2:  122:	return (*this);
        -:  123:}
        -:  124:
        -:  125:template<class T>
 38033280:  126:void Hash_Table<T>::destroy_bucket(Hash_Table<T>::Node *bucket_ptr) const noexcept
        -:  127:{
 38033280:  128:	Node *save_node = nullptr;
 38107612:  129:	while (bucket_ptr) {
    37166:  130:		save_node = bucket_ptr->get_right();
    37166:  131:		delete bucket_ptr;
    37166:  132:		bucket_ptr = save_node;
        -:  133:	}
 38033280:  134:}
        -:  135:
        -:  136:template<class T>
     1128:  137:typename Hash_Table<T>::Node *Hash_Table<T>::deep_copy_bucket(const Hash_Table<T>::Node *bucket_ptr) const
        -:  138:{
     1128:  139:	if (!bucket_ptr)
      145:  140:		return nullptr;
        -:  141:	else {
     1966:  142:		NewHandlerHolder handler(std::set_new_handler(mem_handler));
        -:  143:
        -:  144:#ifdef C_PLUS_PLUS_IS_ALLOWED
        -:  145:		std::stack<Node*> nodes;
        -:  146:		while(bucket_ptr){
        -:  147:			nodes.push(new Node(bucket_ptr->get_value()));
        -:  148:			bucket_ptr = bucket_ptr->get_right();
        -:  149:		}
        -:  150:		Node* current_ptr = nodes.top();
        -:  151:		nodes.pop();
        -:  152:		while(nodes.size()) {
        -:  153:			current_ptr->set_left(nodes.top());
        -:  154:			(nodes.top())->set_right(current_ptr);
        -:  155:			current_ptr = nodes.top();
        -:  156:			nodes.pop();
        -:  157:		}
        -:  158:		return current_ptr;
        -:  159:#else
      983:  160:		Node *new_ptr = new Node(bucket_ptr->get_value());
     7019:  161:		while (bucket_ptr->get_right()) {
     3018:  162:			new_ptr->set_right(new Node((bucket_ptr->get_right())->get_value()));
     3018:  163:			(new_ptr->get_right())->set_left(new_ptr);
     3018:  164:			bucket_ptr = bucket_ptr->get_right();
     3018:  165:			new_ptr = new_ptr->get_right();
        -:  166:		}
        -:  167:
     3018:  168:		while (new_ptr->get_left())
     3018:  169:			new_ptr = new_ptr->get_left();
        -:  170:
      983:  171:		return new_ptr;
        -:  172:#endif
        -:  173:	}
        -:  174:
        -:  175:}
        -:  176:
        -:  177:template<class Key>
       16:  178:Hash_Table<Key>::~Hash_Table<Key>()
        -:  179:{
       16:  180:	if(!hash_t)
        6:  181:		return;
 38028735:  182:	for (std::size_t i = 0; i < n_buckets; ++i)
 38028722:  183:		destroy_bucket(hash_t[i]);
       13:  184:	delete[] hash_t;
       29:  185:}
        -:  186:
        -:  187:template<class Key>
        1:  188:void Hash_Table<Key>::mem_handler()
        -:  189:{
        1:  190:	std::cerr << "Operator new failed. There aren't any vacant memory."
        -:  191:				 "It has happened in redefine operator new for template Hash_Table class" << std::endl;
        1:  192:	throw std::bad_alloc();
        -:  193:}
        -:  194:
        -:  195:template<class T>
    33678:  196:bool Hash_Table<T>::insert(const T &t)
        -:  197:{
    33678:  198:	std::size_t hash_value = 0;
    33678:  199:	Iterator it = findEl(t, hash_value);
    33678:  200:	if (it != end())
        1:  201:		return false;
        -:  202:	else {
    67354:  203:		NewHandlerHolder handler(std::set_new_handler(mem_handler)); // It's just wonderfull
    33677:  204:		if (!hash_t[hash_value]) {
     5465:  205:			hash_t[hash_value] = new Node(t); // allocate and construct the first element in the bucket
        -:  206:		}
        -:  207:		else {
    28212:  208:			Node *new_node = new Node(t);
    28212:  209:			new_node->set_right(hash_t[hash_value]);
    28212:  210:			(hash_t[hash_value])->set_left(new_node);
    28212:  211:			hash_t[hash_value] = new_node;
        -:  212:		}
    33677:  213:		return true;
        -:  214:	}
        -:  215:}
        -:  216:
        -:  217:template<class T>
    35217:  218:typename Hash_Table<T>::Iterator Hash_Table<T>::findEl(const T &el, std::size_t &bucket)
        -:  219:{
    35217:  220:	bucket = hash_func(el);
    35217:  221:	if (hash_t[bucket]) {
    29623:  222:		Iterator it(bucket, n_buckets, hash_t[bucket], hash_t);
    29623:  223:		Iterator it_end(bucket + 1, n_buckets, hash_t[bucket + 1], hash_t);
   957187:  224:		for (; it != it_end; ++it) {
   464808:  225:			if (*it == el)
     1026:  226:				return it;
        -:  227:
        -:  228:		}
        -:  229:	}
    34191:  230:	return end();
        -:  231:}
        -:  232:
        -:  233:template<class Key>
    37678:  234:Hash_Table<Key>::Node::Node(const Key &t)
    37678:  235:	: value(t)
    37678:  236:{}
        -:  237:
        -:  238:template<class T>
    31231:  239:void Hash_Table<T>::Node::set_left(Hash_Table<T>::Node *left) noexcept
        -:  240:{
    31231:  241:	left_ = left;
    31231:  242:}
        -:  243:
        -:  244:template<class T>
    31613:  245:void Hash_Table<T>::Node::set_right(Hash_Table<T>::Node *right) noexcept
        -:  246:{
    31613:  247:	right_ = right;
    31613:  248:}
        -:  249:
        -:  250:template<class T>
   166672:  251:Hash_Table<T>::Iterator::Iterator(size_t n, size_t max, Node *ptr, Node **hash_p)
   166672:  252:	: nbucket_(n), max_buckets(max), ptr_(ptr), hash_t(hash_p)
        -:  253:{
   166672:  254:	if (n > max)
    #####:  255:		throw std::runtime_error("negative value for the number of bucket");
   166672:  256:}
        -:  257:
        -:  258:template<class T>
   512038:  259:T &Hash_Table<T>::Iterator::operator*()
        -:  260:{
   512038:  261:	return const_cast<T &>(static_cast<const Iterator &>(*this).operator*());
        -:  262:}
        -:  263:
        -:  264:template<class T>
   512038:  265:const T &Hash_Table<T>::Iterator::operator*() const
        -:  266:{
   512038:  267:	if (!ptr_)
      912:  268:		throw std::runtime_error("dereferencing nullptr  -- SIGSEGV");
   511126:  269:	return ptr_->get_value();
        -:  270:}
        -:  271:
        -:  272:template<class T>
     3328:  273:typename Hash_Table<T>::Node *Hash_Table<T>::Iterator::operator->()
        -:  274:{
     3328:  275:	return const_cast<typename Hash_Table<T>::Node *>(static_cast<const Iterator &>(*this).operator->());
        -:  276:}
        -:  277:
        -:  278:template<class T>
     3328:  279:const typename Hash_Table<T>::Node *Hash_Table<T>::Iterator::operator->() const
        -:  280:{
     3328:  281:	if (!ptr_)
    #####:  282:		throw std::runtime_error("ptr_ is nullptr [const]");
     3328:  283:	return ptr_;
        -:  284:}
        -:  285:
        -:  286:template<class T>
   509075:  287:typename Hash_Table<T>::Iterator &Hash_Table<T>::Iterator::operator++() noexcept
        -:  288:{
  1018150:  289:	if (!ptr_ ||
   509075:  290:		!ptr_->get_right()) {
    36943:  291:		if (nbucket_ <= max_buckets - 1) {
    36943:  292:			++nbucket_;
    36943:  293:			ptr_ = hash_t[nbucket_];
        -:  294:		}
    36943:  295:		return (*this);
        -:  296:	}
        -:  297:	else {
   472132:  298:		ptr_ = ptr_->get_right();
   472132:  299:		return (*this);
        -:  300:	}
        -:  301:
        -:  302:}
        -:  303:
        -:  304:template<class T>
     5001:  305:const typename Hash_Table<T>::Iterator Hash_Table<T>::Iterator::operator++(int)
        -:  306:{
     5001:  307:	Node *save_current_ptr = ptr_;
        -:  308:
    10001:  309:	if (!ptr_ ||
     5000:  310:		!ptr_->get_right()) {
      513:  311:		if (nbucket_ <= max_buckets - 1) {
      512:  312:			size_t save_nbucket_ = nbucket_;
      512:  313:			++nbucket_;
      512:  314:			ptr_ = hash_t[nbucket_];
      512:  315:			return Iterator(save_nbucket_, max_buckets, save_current_ptr, hash_t);
        -:  316:		}
        1:  317:		return Iterator(nbucket_, max_buckets, save_current_ptr, hash_t);
        -:  318:	}
        -:  319:	else {
     4488:  320:		ptr_ = ptr_->get_right();
     4488:  321:		return Iterator(nbucket_, max_buckets, save_current_ptr, hash_t);
        -:  322:	}
        -:  323:
        -:  324:}
        -:  325:
        -:  326:template<class T>
     5000:  327:typename Hash_Table<T>::Iterator &Hash_Table<T>::Iterator::operator--() noexcept
        -:  328:{
    10000:  329:	if (!ptr_
     5000:  330:		|| !ptr_->get_left()) {
      512:  331:		if (nbucket_ > 0) {
      512:  332:			--nbucket_;
      512:  333:			ptr_ = hash_t[nbucket_]->ptr_to_last_in_bucket(hash_t[nbucket_]);
        -:  334:		}
      512:  335:		return (*this);
        -:  336:
        -:  337:	}
        -:  338:	else {
     4488:  339:		ptr_ = ptr_->get_left();
     4488:  340:		return (*this);
        -:  341:	}
        -:  342:
        -:  343:}
        -:  344:
        -:  345:template<class T>
     1024:  346:typename Hash_Table<T>::Node *Hash_Table<T>::Node::ptr_to_last_in_bucket(const Node *ptr_from) const noexcept
        -:  347:{
     1024:  348:	if (!ptr_from)
    #####:  349:		return nullptr;
     8976:  350:	while (ptr_from->get_right()) {
     8976:  351:		ptr_from = ptr_from->get_right();
        -:  352:	}
     1024:  353:	return const_cast<Node *>(ptr_from);
        -:  354:
        -:  355:}
        -:  356:
        -:  357:template<class T>
     5001:  358:const typename Hash_Table<T>::Iterator Hash_Table<T>::Iterator::operator--(int)
        -:  359:{
     5001:  360:	Node *save_current_node = ptr_;
    10000:  361:	if (!ptr_ ||
     4999:  362:		!ptr_->get_left()) {
      513:  363:		if (nbucket_ > 0) {
      512:  364:			size_t save_nbucket_ = nbucket_;
      512:  365:			--nbucket_;
      512:  366:			ptr_ = hash_t[nbucket_]->ptr_to_last_in_bucket(hash_t[nbucket_]);
      512:  367:			return Iterator(save_nbucket_, max_buckets, save_current_node, hash_t);
        -:  368:		}
        1:  369:		return Iterator(nbucket_, max_buckets, ptr_, hash_t);
        -:  370:	}
        -:  371:	else {
     4488:  372:		ptr_ = ptr_->get_left();
     4488:  373:		return Iterator(nbucket_, max_buckets, save_current_node, hash_t);
        -:  374:	}
        -:  375:}
        -:  376:
        -:  377:template<class T>
   597669:  378:bool Hash_Table<T>::Iterator::operator==(const Hash_Table<T>::Iterator &it) const noexcept
        -:  379:{
   597669:  380:	return (ptr_ == it.ptr_ && nbucket_ == it.nbucket_ && hash_t == it.hash_t && max_buckets == it.max_buckets);
        -:  381:}
        -:  382:
        -:  383:template<class T>
   591637:  384:bool Hash_Table<T>::Iterator::operator!=(const Hash_Table<T>::Iterator &it) const noexcept
        -:  385:{
   591637:  386:	return !(*this == it);
        -:  387:}
        -:  388:
        -:  389:template<class T>
    10007:  390:typename Hash_Table<T>::Iterator Hash_Table<T>::begin()
        -:  391:{
    10007:  392:	return Iterator(0, n_buckets, hash_t[0], hash_t);
        -:  393:}
        -:  394:
        -:  395:template<class T>
    68901:  396:typename Hash_Table<T>::Iterator Hash_Table<T>::end()
        -:  397:{
    68901:  398:	return Iterator(n_buckets, n_buckets, hash_t[n_buckets], hash_t);
        -:  399:}
        -:  400:
        -:  401:template<class T>
    35217:  402:std::size_t Hash_Table<T>::hash_func(const T &key)
        -:  403:{
        -:  404:	static std::hash<T> hash_f;
    35217:  405:	return hash_f(key) % n_buckets;
        -:  406:}
        -:  407:
        -:  408:template<class T>
  1064318:  409:const typename Hash_Table<T>::Node *Hash_Table<T>::Node::get_right() const noexcept
        -:  410:{
  1064318:  411:	return right_;
        -:  412:}
        -:  413:
        -:  414:template<class T>
    27401:  415:const typename Hash_Table<T>::Node *Hash_Table<T>::Node::get_left() const noexcept
        -:  416:{
    27401:  417:	return left_;
        -:  418:}
        -:  419:
        -:  420:template<class T>
    27401:  421:typename Hash_Table<T>::Node *Hash_Table<T>::Node::get_left() noexcept
        -:  422:{
    27401:  423:	return const_cast<Node *>(static_cast<const Node *>(this)->get_left());
        -:  424:}
        -:  425:template<class T>
  1035305:  426:typename Hash_Table<T>::Node *Hash_Table<T>::Node::get_right() noexcept
        -:  427:{
  1035305:  428:	return const_cast<Node *>(static_cast<const Node *>(this)->get_right());
        -:  429:}
        -:  430:
        -:  431:template<class T>
   515127:  432:const T &Hash_Table<T>::Node::get_value() const noexcept
        -:  433:{
   515127:  434:	return value;
        -:  435:}
        -:  436:
        -:  437:template<class T>
      513:  438:bool Hash_Table<T>::erase(const T &t)
        -:  439:{
      513:  440:	std::size_t bucket = 0;
      513:  441:	Iterator it = findEl(t, bucket);
      513:  442:	if (it == end())
        1:  443:		return false;
        -:  444:	else {
      512:  445:		if (it->get_right())
        1:  446:			(it->get_right())->set_left(it->get_left());
        -:  447:
      512:  448:		if (it->get_left())
      383:  449:			(it->get_left())->set_right(it->get_right());
        -:  450:
      512:  451:		int flag_erase_the_first_el = 0;
      512:  452:		Node *save_ptr = it->get_right();
      512:  453:		if (!it->get_left())
      129:  454:			flag_erase_the_first_el = 1;
        -:  455:
      512:  456:		delete it.operator->();
      512:  457:		if (flag_erase_the_first_el)
      129:  458:			hash_t[bucket] = save_ptr;
      512:  459:		return true;
        -:  460:	}
        -:  461:}
        -:  462:
        -:  463:template<class T>
       17:  464:void Hash_Table<T>::showDistribution(info &map) const
        -:  465:{
       17:  466:	if (!map.empty())
        6:  467:		map.clear();
     9275:  468:	for (std::size_t i = 0; i < n_buckets; ++i) {
     9258:  469:		Iterator it(i, n_buckets, hash_t[i], hash_t);
     9258:  470:		Iterator it_next(i + 1, n_buckets, hash_t[i + 1], hash_t);
    99844:  471:		while (it != it_next) {
        -:  472:			try {
    46205:  473:				T value = *it; // it's a very bad string of code [but this time It would be like this]
    45293:  474:				map.insert(std::make_pair(i, value));
        -:  475:			}
     1824:  476:			catch (const std::runtime_error &er) {
      912:  477:				break;
        -:  478:			}
    45293:  479:			++it;
        -:  480:		}
        -:  481:	}
       17:  482:}
        -:  483:
        -:  484:template<class T>
        2:  485:std::ofstream &operator<<(std::ofstream &out, const Hash_Table<T> &ht)
        -:  486:{
        4:  487:	std::multimap<std::size_t, T> map;
        2:  488:	ht.showDistribution(map);
     3932:  489:	for (std::size_t i = 0; i < ht.size(); ++i) {
     3930:  490:		auto it = map.equal_range(i);
     3930:  491:		out << "[ " << i << " ] === ";
     4296:  492:		if (it.first == map.end() || it.first == it.second) {
      366:  493:			out << "null\n";
      366:  494:			continue;
        -:  495:		}
    13599:  496:		for (auto ip = it.first; ip != it.second;) {
    10035:  497:			out << (*ip).second;
    10035:  498:			++ip;
    10035:  499:			if (ip != it.second)
     6471:  500:				out << ", ";
        -:  501:			else {
     3564:  502:				out << ";   { " << map.count(i) << " }\n";
        -:  503:			}
        -:  504:		}
        -:  505:	}
        4:  506:	return out;
        -:  507:}
        -:  508:
        -:  509:template
        -:  510:class Hash_Table<int>; //explicit declaration of instantiation of Hash_Table class for int type
        -:  511:template std::ofstream &operator<<(std::ofstream &out,
        3:  512:								   const Hash_Table<int> &ht); //explicit declaration of operator << for int template argument
