==32369== Memcheck, a memory error detector
==32369== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==32369== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==32369== Command: ./HashTable
==32369== Parent PID: 32368
==32369== 
==32369== Warning: set address range perms: large range [0x6bae040, 0x18dc7418) (undefined)
**32369** new/new[] failed and should throw an exception, but Valgrind
**32369**    cannot throw exceptions and so is aborting instead.  Sorry.
==32369==    at 0x4C2F81C: ??? (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==32369==    by 0x4C30915: operator new[](unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==32369==    by 0x129F97: Hash_Table<int>::Hash_Table(unsigned long) (Hash_Table.cpp:63)
==32369==    by 0x11964C: hashTableTest::testConstructorThrow() (hashTableTest.cpp:13)
==32369==    by 0x11733E: std::_Function_handler<void (), void (*)()>::_M_invoke(std::_Any_data const&) (std_function.h:316)
==32369==    by 0x119409: std::function<void ()>::operator()() const (std_function.h:706)
==32369==    by 0x11923D: CppUnit::TestCaller<hashTableTest>::runTest() (TestCaller.h:175)
==32369==    by 0x4E5E881: CppUnit::TestCaseMethodFunctor::operator()() const (in /usr/lib/x86_64-linux-gnu/libcppunit-1.14.so.0.0.0)
==32369==    by 0x4E54E62: CppUnit::DefaultProtector::protect(CppUnit::Functor const&, CppUnit::ProtectorContext const&) (in /usr/lib/x86_64-linux-gnu/libcppunit-1.14.so.0.0.0)
==32369==    by 0x4E5B9E4: CppUnit::ProtectorChain::protect(CppUnit::Functor const&, CppUnit::ProtectorContext const&) (in /usr/lib/x86_64-linux-gnu/libcppunit-1.14.so.0.0.0)
==32369==    by 0x4E6441B: CppUnit::TestResult::protect(CppUnit::Functor const&, CppUnit::Test*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (in /usr/lib/x86_64-linux-gnu/libcppunit-1.14.so.0.0.0)
==32369==    by 0x4E5E6BF: CppUnit::TestCase::run(CppUnit::TestResult*) (in /usr/lib/x86_64-linux-gnu/libcppunit-1.14.so.0.0.0)
==32369== 
==32369== HEAP SUMMARY:
==32369==     in use at exit: 304,196,338 bytes in 60 blocks
==32369==   total heap usage: 74,417 allocs, 74,357 frees, 308,209,087 bytes allocated
==32369== 
==32369== LEAK SUMMARY:
==32369==    definitely lost: 0 bytes in 0 blocks
==32369==    indirectly lost: 0 bytes in 0 blocks
==32369==      possibly lost: 0 bytes in 0 blocks
==32369==    still reachable: 304,196,338 bytes in 60 blocks
==32369==         suppressed: 0 bytes in 0 blocks
==32369== Reachable blocks (those to which a pointer was found) are not shown.
==32369== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==32369== 
==32369== For counts of detected and suppressed errors, rerun with: -v
==32369== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
